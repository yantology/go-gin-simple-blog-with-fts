basePath: /api/v1
definitions:
  models.ArticleRequest:
    properties:
      content:
        minLength: 3
        type: string
      title:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - content
    - title
    type: object
  models.ArticleResponse:
    properties:
      content:
        type: string
      id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.ArticlesResponse:
    properties:
      articles:
        items:
          $ref: '#/definitions/models.ArticleResponse'
        type: array
    type: object
  models.ChangePasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  models.CheckUsernameRequest:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username_or_email:
        type: string
    required:
    - password
    - username_or_email
    type: object
  models.Message:
    properties:
      message:
        type: string
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
host: localhost:5555
info:
  contact:
    email: collab@yantology.dev
    name: Wijayanto
    url: http://www.yantology.dev
  description: This is a Simple Blog with FTS API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Simple Blog with FTS API
  version: "1.0"
paths:
  /articles:
    get:
      description: Get all articles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ArticlesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      summary: Get all articles
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create a new article
      parameters:
      - description: Article Request
        in: body
        name: article
        schema:
          $ref: '#/definitions/models.ArticleRequest'
      - description: Title
        in: formData
        name: title
        required: true
        type: string
      - description: Content
        in: formData
        name: content
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      security:
      - ApiKeyAuth: []
      summary: Create a new article
      tags:
      - articles
  /articles/{id}:
    delete:
      description: Delete an article by ID
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      security:
      - ApiKeyAuth: []
      summary: Delete an article by ID
      tags:
      - articles
    get:
      description: Get an article by ID
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ArticleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      summary: Get an article by ID
      tags:
      - articles
    put:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Update an article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Article Request
        in: body
        name: article
        schema:
          $ref: '#/definitions/models.ArticleRequest'
      - description: Title
        in: formData
        name: title
        type: string
      - description: Content
        in: formData
        name: content
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      security:
      - ApiKeyAuth: []
      summary: Update an article
      tags:
      - articles
  /articles/search:
    get:
      description: Search articles
      parameters:
      - description: Search Query
        in: query
        name: query
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ArticleResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      summary: Search articles
      tags:
      - articles
  /change-password:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Change a user's password
      parameters:
      - description: Change Password Request
        in: body
        name: changePassword
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      - description: Old Password
        in: formData
        name: old_password
        type: string
      - description: New Password
        in: formData
        name: new_password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      security:
      - ApiKeyAuth: []
      summary: Change a user's password
      tags:
      - auth
  /check-username:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Check if a username exists
      parameters:
      - description: Change Password Request
        in: body
        name: username
        required: true
        schema:
          $ref: '#/definitions/models.CheckUsernameRequest'
      - description: Username
        in: formData
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Check if a username exists
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Login a user
      parameters:
      - description: Login Request
        in: body
        name: login
        schema:
          $ref: '#/definitions/models.LoginRequest'
      - description: Username or Email
        in: formData
        name: username_or_email
        type: string
      - description: Password
        in: formData
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      summary: Login a user
      tags:
      - auth
  /refresh-token:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Refresh a user's token
      parameters:
      - description: Refresh Token Request
        in: body
        name: refreshToken
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      - description: Refresh Token
        in: formData
        name: refresh_token
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      summary: Refresh a user's token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Register a new user
      parameters:
      - description: Register Request
        in: body
        name: register
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      - description: Username
        in: formData
        name: username
        type: string
      - description: Email
        in: formData
        name: email
        type: string
      - description: Password
        in: formData
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      summary: Register a new user
      tags:
      - auth
  /users/{id}/articles:
    get:
      description: Get articles by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ArticlesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Message'
      summary: Get articles by user ID
      tags:
      - articles
securityDefinitions:
  ApiKeyAuth:
    description: Description for what is this security definition being used
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: Grants read and write access to administrative informatio
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: Grants read and write access to administrative information
      write: Grants write access
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: Grants read and write access to administrative information
      write: Grants write access
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: Grants read and write access to administrative information
      read: Grants read access
      write: Grants write access
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
